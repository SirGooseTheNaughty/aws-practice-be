service: import-service

frameworkVersion: '3'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  s3BucketName: aws-practice-svorobyev-products-bucket
  sqsQueueName: product-import-queue
  snsTopicName: product-import-topic

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-1
  stage: dev
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource: '*'
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:DeleteObject
            - s3:GetObjectTagging
            - s3:PutObject
            - s3:PutObjectTagging
            - s3:CopyObject
          Resource: arn:aws:s3:::${self:custom.s3BucketName}/*
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - Fn::GetAtt: [SQSQueue, Arn]
        - Effect: Allow
          Action:
            - dynamodb:PutItem
          Resource: 'arn:aws:dynamodb:*:*:*'
        - Effect: Allow
          Action:
            - sns:Publish
          Resource:
            - Ref: SNSTopic
  environment:
    SQS_URL:
      Ref: SQSQueue
    SNS_ARN:
      Ref: SNSTopic
  httpApi:
    authorizers:
      basicAuthorizer:
        type: request
        functionArn: arn:aws:lambda:${aws:region}:${aws:accountId}:function:authorization-service-dev-basicAuthorizer
        resultTtlInSeconds: 0
        identitySource:
          - $request.header.Authorization

plugins:
  - serverless-webpack

functions:
  importProducts:
    handler: handler.importProductsFile
    events:
      - httpApi:
          path: /import
          method: get
          cors: true
          authorizer:
            name: basicAuthorizer
          request:
            parameters:
              querystrings:
                name: true
  importFileParser:
    handler: handler.importFileParser
    events:
      - s3:
          bucket: ${self:custom.s3BucketName}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqsQueueName}
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:custom.snsTopicName}
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: sergey_vorobyev@epam.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
    OverpriceSNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: svorobyev@idbs.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          price: [{"numeric": [">", 20]}]